/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI;

import Classes.Consulta;
import DAO.ErpDAOException;
import DAO.ConsultaDAO;
import DAO.MedicoDAO;
import Classes.Medico;
import DAO.PacienteDAO;
import Classes.Paciente;
import java.sql.Time;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import javax.swing.JOptionPane;

/**
 *
 * @author yugurimaru
 */
public class Consultas_editar extends javax.swing.JFrame {

    private Consulta consulta;
    ArrayList<Medico> medico = new ArrayList();
    ArrayList<Paciente> paciente = new ArrayList();

    /**
     * Creates new form Pacientes_Inserir
     */
    public Consultas_editar(Consulta consulta) {
        this.consulta = consulta;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        TF_hora_consulta = new javax.swing.JTextField();
        BT_salvar = new javax.swing.JButton();
        BT_cancelar = new javax.swing.JButton();
        RB_nao = new javax.swing.JRadioButton();
        RB_sim = new javax.swing.JRadioButton();
        jLabel5 = new javax.swing.JLabel();
        RB_aberto = new javax.swing.JRadioButton();
        DC_data_consulta = new datechooser.beans.DateChooserPanel();
        CB_id_medico = new javax.swing.JComboBox<>();
        CB_id_paciente = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Editar Consulta");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel1.setText("Médico:");

        jLabel2.setText("Data da Consulta:");

        jLabel3.setText("Compareceu");

        jLabel4.setText("Hora(HH:mm):");

        TF_hora_consulta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TF_hora_consultaActionPerformed(evt);
            }
        });

        BT_salvar.setText("Salvar");
        BT_salvar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                BT_salvarMousePressed(evt);
            }
        });

        BT_cancelar.setText("Cancelar");
        BT_cancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BT_cancelarActionPerformed(evt);
            }
        });

        buttonGroup1.add(RB_nao);
        RB_nao.setText("Não");

        buttonGroup1.add(RB_sim);
        RB_sim.setText("Sim");

        jLabel5.setText("Paciente:");

        buttonGroup1.add(RB_aberto);
        RB_aberto.setText("Em aberto");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(132, 132, 132))
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)
                            .addGap(18, 18, 18)
                            .addComponent(TF_hora_consulta, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(17, 17, 17))
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(BT_cancelar)
                                    .addGap(18, 18, 18)
                                    .addComponent(BT_salvar))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel3)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(RB_nao)
                                    .addGap(18, 18, 18)
                                    .addComponent(RB_aberto)))
                            .addGap(18, 18, 18)
                            .addComponent(RB_sim)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(CB_id_medico, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(CB_id_paciente, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(DC_data_consulta, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(25, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(CB_id_medico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(CB_id_paciente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(DC_data_consulta, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(TF_hora_consulta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(RB_nao)
                    .addComponent(RB_sim)
                    .addComponent(RB_aberto))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BT_salvar)
                    .addComponent(BT_cancelar))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void TF_hora_consultaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TF_hora_consultaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TF_hora_consultaActionPerformed

    private void BT_cancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BT_cancelarActionPerformed
        dispose();
    }//GEN-LAST:event_BT_cancelarActionPerformed

    private void BT_salvarMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BT_salvarMousePressed
        String id_medico, id_paciente, data_string;
        Date dataNasc = null;
        Time hora = null;
        char compareceu = ' ';
        DateFormat dtOutput = new SimpleDateFormat("dd/MM/yyyy");

        //Seleciona o paciente e o medico da ComboBox
        Medico medico_selecionado = medico.get(CB_id_medico.getSelectedIndex());
        Paciente paciente_selecionado = paciente.get(CB_id_paciente.getSelectedIndex());

        if (medico_selecionado == null) {
            JOptionPane.showMessageDialog(rootPane, "Selecione o Médico");
        } else if (paciente_selecionado == null) {
            JOptionPane.showMessageDialog(rootPane, "Selecione o Paciente");
        } else if ((RB_nao.isSelected() == false) && (RB_sim.isSelected() == false) && RB_aberto.isSelected() == false) {
            JOptionPane.showMessageDialog(rootPane, "Selecione o Compareceu");
        } else {

            id_medico = String.valueOf(medico_selecionado.getID_Medico());
            id_paciente = String.valueOf(paciente_selecionado.getCodigo());

            if (RB_sim.isSelected() == true) {
                compareceu = 'S';
            }
            if (RB_nao.isSelected() == true) {
                compareceu = 'N';
            }
            if (RB_aberto.isSelected() == true) {
                compareceu = 'A';
            }

            Calendar date = DC_data_consulta.getSelectedDate();
            int mes = (int) date.get(Calendar.MONTH);
            mes += 1;
            data_string = (date.get(Calendar.DAY_OF_MONTH) + "/" + mes + "/" + date.get(Calendar.YEAR));
            if (data_string.equals("")) {
                dataNasc = null;

            } else {
                try {
                    dataNasc = dtOutput.parse(data_string);
                } catch (ParseException ex) {
                    System.out.println("Erro na conversão da data");
                }
            }

            if (TF_hora_consulta.getText().equals("")) {
                hora = null;
            } else {
                try {
                    hora = Time.valueOf(TF_hora_consulta.getText() + ":00");
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(rootPane, "Erro na conversão da hora");
                }
            }

            int id_paciente_int = Integer.parseInt(id_paciente);
            int id_medico_int = Integer.parseInt(id_medico);

            consulta.setId_paciente(id_paciente_int);
            consulta.setId_medico(id_medico_int);
            consulta.setData(dataNasc);
            consulta.setHora(hora);
            consulta.setCompareceu(compareceu);

            try {
                ConsultaDAO CDAO = new ConsultaDAO();
                CDAO.Atualizar(consulta);
                JOptionPane.showMessageDialog(rootPane, "Edição efetuada com sucesso!!");
            } catch (Exception e) {
                JOptionPane.showMessageDialog(rootPane, "Problema na edição da Consulta");
            }
            dispose();
        }
    }//GEN-LAST:event_BT_salvarMousePressed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        String hora_string;

        CarregaCB();

        Calendar calendar = Calendar.getInstance();
        calendar.setTime(consulta.getData());
        DC_data_consulta.setSelectedDate(calendar);

        SimpleDateFormat format = new SimpleDateFormat("HH:mm");
        hora_string = format.format(consulta.getHora());
        TF_hora_consulta.setText(hora_string);

        if (consulta.getCompareceu() == 'N') {
            RB_nao.setSelected(true);
        } else if (consulta.getCompareceu() == 'S') {
            RB_sim.setSelected(true);
        } else {
            RB_aberto.setSelected(true);
        }

    }//GEN-LAST:event_formWindowOpened

    private void CarregaCB() {
        try {
            CB_id_medico.removeAllItems();
            CB_id_paciente.removeAllItems();

            MedicoDAO MDAO = new MedicoDAO();
            medico = MDAO.Listar();

            PacienteDAO PDAO = new PacienteDAO();
            paciente = PDAO.Listar();

        } catch (Exception e) {
            System.out.println("problema");
        }

        // Insere o arraylist nas JComboBox
        for (int i = 0; i < medico.size(); i++) {
            CB_id_medico.addItem(medico.get(i).getNome_med());

        }
        for (int i = 0; i < paciente.size(); i++) {
            CB_id_paciente.addItem(paciente.get(i).getNome_pac());
        }

        // Configurar a seleção na JComboBox com base no objeto de consulta
        for (int i = 0; i < medico.size(); i++) {
            if (medico.get(i).getID_Medico() == consulta.getId_medico()) {
                CB_id_medico.setSelectedIndex(i);
                break;
            }
        }

        for (int i = 0; i < paciente.size(); i++) {
            if (paciente.get(i).getCodigo() == consulta.getId_paciente()) {
                CB_id_paciente.setSelectedIndex(i);
                break;
            }
        }

    }

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BT_cancelar;
    private javax.swing.JButton BT_salvar;
    private javax.swing.JComboBox<String> CB_id_medico;
    private javax.swing.JComboBox<String> CB_id_paciente;
    private datechooser.beans.DateChooserPanel DC_data_consulta;
    private javax.swing.JRadioButton RB_aberto;
    private javax.swing.JRadioButton RB_nao;
    private javax.swing.JRadioButton RB_sim;
    private javax.swing.JTextField TF_hora_consulta;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    // End of variables declaration//GEN-END:variables
}
